AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CodeBucket:
    Type: String
    Default: DEFAULT_BUCKET
    Description: Name of the bucket that contains the lambda functions to deploy.
      Leave the default value to download the code from the AWS Managed buckets
  ClusterNamePattern:
    Type: String
    Default: ALL_CLUSTERS
    Description: Python regex for matching cluster identifiers to backup. Use "ALL_CLUSTERS"
      to back up every Aurora cluster in the region.
  BucketName:
    Type: String
    Description: Bucket Name
  BackupInterval:
    Type: Number
    Default: '24'
    Description: Interval for backups in hours. Default is 24
  DestinationAccount:
    Type: Number
    Default: '000000000000'
    Description: Destination account with no dashes.
  ShareSnapshots:
    Type: String
    Default: 'TRUE'
    AllowedValues:
    - 'TRUE'
    - 'FALSE'
  BackupSchedule:
    Type: String
    Default: 0 1 * * ? *
    Description: 'Backup schedule in Cloudwatch Event cron format. Needs to run at
      least once for every Interval. The default value runs once every at 1AM UTC.
      More information: http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html'
  RetentionDays:
    Type: Number
    Default: '7'
    Description: Number of days to keep snapshots in retention before deleting them
  LogLevel:
    Type: String
    Default: ERROR
    Description: Log level for Lambda functions (DEBUG, INFO, WARN, ERROR, CRITICAL
      are valid values).
  SourceRegionOverride:
    Type: String
    Default: 'NO'
    Description: Set to the region where your Aurora clusters run, only if such region
      does not support Step Functions. Leave as NO otherwise
  DeleteOldSnapshots:
    Type: String
    Default: 'TRUE'
    Description: Set to TRUE to enable deletion of snapshot based on RetentionDays.
      Set to FALSE to disable
    AllowedValues:
    - 'TRUE'
    - 'FALSE'
  SNSTopic:
    Type: String
    Default: ''
    Description: If you have a topic that you would like subscribed to notifications,
      enter it here. If empty, the tool will create a new topic
Conditions:
  Share:
    Fn::Equals:
    - Ref: ShareSnapshots
    - 'TRUE'
  DeleteOld:
    Fn::Equals:
    - Ref: DeleteOldSnapshots
    - 'TRUE'
  DefaultBucket:
    Fn::Equals:
    - Ref: CodeBucket
    - DEFAULT_BUCKET
  SNSTopicIsEmpty:
    Fn::Equals:
    - Ref: SNSTopic
    - ''
#Mappings:
#  Buckets:
#    us-east-1:
#      Bucket: 
#        - Ref: BucketName #-tool-aurora-us-east-1
#    us-west-2:
#      Bucket: 001vpcflowlogs
#    us-east-2:
#      Bucket: 001vpcflowlogs
#    ap-southeast-2:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-ap-southeast-2
#    ap-northeast-1:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-ap-northeast-1
#    eu-west-1:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-eu-west-1
#    eu-west-2:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-eu-west-2-real
#    eu-central-1:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-eu-central-1
#    us-west-1:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-us-west-1
#    eu-west-3:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-eu-west-3
#    ap-south-1:
#      Bucket: !
#        - Ref: BucketName # snapshots-tool-aurora-ap-south-1
#    ap-southeast-1:
#      Bucket: 
#        - Ref: BucketName #snapshots-tool-aurora-ap-southeast-1
#    ap-northeast-2:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-ap-northeast-2
#    ca-central-1:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-ca-central-1
#    sa-east-1:
#      Bucket: 
#        - Ref: BucketName # snapshots-tool-aurora-sa-east-1
Resources:
  snsTopicSnapshotsAuroraTool:
    Condition: SNSTopicIsEmpty
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: topic_aurora_tool
  snspolicySnapshotsAurora:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Fn::If:
        - SNSTopicIsEmpty
        - Ref: snsTopicSnapshotsAuroraTool
        - Ref: SNSTopic
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:GetTopicAttributes
          - SNS:SetTopicAttributes
          - SNS:AddPermission
          - SNS:RemovePermission
          - SNS:DeleteTopic
          - SNS:Subscribe
          - SNS:ListSubscriptionsByTopic
          - SNS:Publish
          - SNS:Receive
          Resource: "*"
          Condition:
            StringEquals:
              AWS:SourceOwner:
                Ref: AWS::AccountId
  stateMachineTakeSnapshotsAurora: 
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      Fn::Transform:
        Name: AWS::Include
        Parameters:
          Location: 
            Fn::Sub: 's3://001vpcflowlogs/Aurora DR/StepFunctions/StepFunction1.yaml'         
      RoleArn:
        Fn::GetAtt:
        - iamroleStateExecution
        - Arn

  iamroleSnapshotsAurora:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: inline_policy_snapshots_aurora_cw_logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: inline_policy_snapshots_aurora_rds
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - rds:CreateDBClusterSnapshot
            - rds:DeleteDBClusterSnapshot
            - rds:DescribeDBClusters
            - rds:DescribeDBClusterSnapshots
            - rds:ModifyDBClusterSnapshotAttribute
            - rds:DescribeDBClusterSnapshotAttributes
            - rds:ListTagsForResource
            Resource: "*"
  lambdaTakeSnapshotsAurora:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: Aurora DR/Lambda/take_snapshots_aurora.zip
      Description: 'This functions triggers snapshots creation for Aurora clusters.
        It checks for existing snapshots following the pattern and interval specified
        in the environment variables with the following format: <dbcluster-identifier>-YYYY-MM-DD-HH-MM'
      MemorySize: 512
      Environment:
        Variables:
          INTERVAL:
            Ref: BackupInterval
          PATTERN:
            Ref: ClusterNamePattern
          LOG_LEVEL:
            Ref: LogLevel
          REGION_OVERRIDE:
            Ref: SourceRegionOverride
      Role:
        Fn::GetAtt:
        - iamroleSnapshotsAurora
        - Arn
      Runtime: python3.6
      Handler: lambda_function.lambda_handler
      Timeout: 300
  lambdaCheckSnapshotStatusAurora:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: Aurora DR/Lambda/check_snapshots_status.zip
      Description: 'This functions check the snapshot status'
      MemorySize: 512
      Environment:
        Variables:
          INTERVAL:
            Ref: BackupInterval
          PATTERN:
            Ref: ClusterNamePattern
          LOG_LEVEL:
            Ref: LogLevel
          REGION_OVERRIDE:
            Ref: SourceRegionOverride
      Role:
        Fn::GetAtt:
        - iamroleSnapshotsAurora
        - Arn
      Runtime: python3.6
      Handler: lambda_function.lambda_handler
      Timeout: 300
  lambdaShareSnapshotsAurora:
    Type: AWS::Lambda::Function
    Condition: Share
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: Aurora DR/Lambda/share_snapshots_aurora.zip
      Description: 'This function shares snapshots created by the aurora_take_snapshots
        function with DEST_ACCOUNT specified in the environment variables. '
      MemorySize: 512
      Environment:
        Variables:
          DEST_ACCOUNT:
            Ref: DestinationAccount
          LOG_LEVEL:
            Ref: LogLevel
          PATTERN:
            Ref: ClusterNamePattern
          REGION_OVERRIDE:
            Ref: SourceRegionOverride
      Role:
        Fn::GetAtt:
        - iamroleSnapshotsAurora
        - Arn
      Runtime: python3.6
      Handler: lambda_function.lambda_handler
      Timeout: 300
  lambdaDeleteOldSnapshotsAurora:
    Type: AWS::Lambda::Function
    Condition: DeleteOld
    Properties:
      Code:
        S3Bucket: !Ref BucketName
        S3Key: Aurora DR/Lambda/delete_old_snapshots_aurora.zip
      Description: 'This function shares snapshots created by the aurora_take_snapshots
        function with DEST_ACCOUNT specified in the environment variables. '
      MemorySize: 512
      Environment:
        Variables:
          RETENTION_DAYS:
            Ref: RetentionDays
          PATTERN:
            Ref: ClusterNamePattern
          LOG_LEVEL:
            Ref: LogLevel
          REGION_OVERRIDE:
            Ref: SourceRegionOverride
      Role:
        Fn::GetAtt:
        - iamroleSnapshotsAurora
        - Arn
      Runtime: python3.6
      Handler: lambda_function.lambda_handler
      Timeout: 300
  iamroleStateExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Join:
              - ''
              - - states.
                - Ref: AWS::Region
                - ".amazonaws.com"
          Action: sts:AssumeRole
      Policies:
      - PolicyName: inline_policy_snapshots_aurora
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: "*"
  iamroleStepInvocation:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: inline_policy_state_invocation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: "*"

Outputs:
  SNSTopic:
    Description: Subscribe to this topic to receive alerts of failures with the snapshots
      tool
    Value:
      Fn::If:
      - SNSTopicIsEmpty
      - Ref: snsTopicSnapshotsAuroraTool
      - Ref: SNSTopic
Description: Snapshots Tool for Aurora cross-region and cross-account (source account
  stack)